plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    id 'kotlin-kapt'
    id 'kotlinx-serialization'
}

def keystoreProps = new Properties()
def keystorePropsFile = rootProject.file('keystore/r0s.properties')
if (keystorePropsFile.exists()) {
    keystoreProps.load(new FileInputStream(keystorePropsFile))
}

def calendar = Calendar.getInstance()
def formatTime = String.format(
        "%d.%d.%d",
        calendar.get(Calendar.YEAR) % 100,
        calendar.get(Calendar.MONTH) + 1,
        calendar.get(Calendar.DAY_OF_MONTH)
)

android {
    compileSdk 33

    defaultConfig {
        applicationId "com.rosan.installer.x"
        minSdk 21
        targetSdk 33
        versionCode 1
        versionName "1.0" + "_" + formatTime

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        vectorDrawables {
            useSupportLibrary true
        }
    }

    signingConfigs {
        debug {
            keyAlias keystoreProps['keyAlias']
            keyPassword keystoreProps['keyPassword']
            storeFile keystoreProps['storeFile'] ? file(keystoreProps['storeFile']) : null
            storePassword keystoreProps['storePassword']
            v1SigningEnabled true
            v2SigningEnabled true
        }

        release {
            keyAlias keystoreProps['keyAlias']
            storePassword keystoreProps['storePassword']
            keyPassword keystoreProps['keyPassword']
            storeFile keystoreProps['storeFile'] ? file(new File(keystoreProps['storeFile'])) : null
            v1SigningEnabled true
            v2SigningEnabled true
        }
    }

    buildTypes {
        debug {
            signingConfig signingConfigs.debug
            minifyEnabled false
            zipAlignEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }

        release {
            signingConfig signingConfigs.release
            minifyEnabled true
            zipAlignEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
        freeCompilerArgs += ['-Xjvm-default=all']
    }
    buildFeatures {
        compose true
    }
    composeOptions {
        kotlinCompilerExtensionVersion compose_version
//        kotlinCompilerExtensionVersion "1.3.2"
    }
    packagingOptions {
        resources {
            excludes += '/META-INF/{AL2.0,LGPL2.1}'
        }
    }
}

/*gradle.projectsEvaluated {
    tasks.withType(JavaCompile) {
        List<File> list = new ArrayList<>()
        list.add(file('../android-30.jar'))
        list.addAll(options.bootstrapClasspath.files)
        options.bootstrapClasspath = files(list.toArray())
    }
}*/

dependencies {
    /**
     * @name Google Maven
     * @description found the packages in Google Maven.
     * @url https://maven.google.com/web/index.html?hl=zh-cn
     * */
    implementation 'androidx.core:core-ktx:1.9.0'
//    implementation "androidx.compose.ui:ui:$compose_version"
    implementation "androidx.compose.ui:ui:1.3.3"
    implementation 'androidx.compose.material:material:1.3.1'
    implementation 'androidx.compose.material3:material3:1.0.1'
//    implementation "androidx.compose.ui:ui-tooling-preview:$compose_version"
    implementation "androidx.compose.ui:ui-tooling-preview:1.3.3"
    implementation 'androidx.lifecycle:lifecycle-runtime-ktx:2.5.1'
    implementation 'androidx.activity:activity-compose:1.6.1'
    implementation 'androidx.core:core-ktx:+'

    compileOnly project(':hidden-api')

    /**
     * @name AndroidHiddenApiBypass
     * @url https://github.com/LSPosed/AndroidHiddenApiBypass
     * */
    def hiddenapibypass_version = '4.3'
    implementation "org.lsposed.hiddenapibypass:hiddenapibypass:$hiddenapibypass_version"

    /**
     * @name Koin Inject
     * @url https://insert-koin.io/docs/quickstart/kotlin
     * */
    def koin_core_version = "3.2.2"
    def koin_android_version = '3.3.0'
    implementation "io.insert-koin:koin-core:$koin_core_version"
    implementation "io.insert-koin:koin-android:$koin_android_version"
    implementation "io.insert-koin:koin-androidx-compose:$koin_android_version"

    /**
     * @name Navigation for compose
     * @url https://developer.android.google.cn/jetpack/compose/navigation?hl=zh-cn
     * */
    def nav_version = '2.5.3'
    implementation "androidx.navigation:navigation-compose:$nav_version"

    /**
     * @name Material Icons for compose
     * @url https://developer.android.com/reference/kotlin/androidx/compose/material/icons/package-summary
     * */
    def material_icons_extended_version = '1.3.1'
    implementation "androidx.compose.material:material-icons-extended:$material_icons_extended_version"

    /**
     * @name Lottie for android compose
     * @url http://airbnb.io/lottie/#/android-compose
     * */
    def lottie_version = '5.2.0'
    implementation "com.airbnb.android:lottie-compose:$lottie_version"

    def accompanist_version = '0.28.0'
    /**
     * @name Pager layouts
     * @url https://google.github.io/accompanist/pager/
     * */
    implementation "com.google.accompanist:accompanist-pager:$accompanist_version"
    /**
     * @name Jetpack Navigation Compose Animation
     * @url https://google.github.io/accompanist/navigation-animation/
     * */
    implementation "com.google.accompanist:accompanist-navigation-animation:$accompanist_version"
    /**
     * @name Jetpack Compose Flow Layouts
     * @url https://google.github.io/accompanist/flowlayout/
     * */
    implementation "com.google.accompanist:accompanist-flowlayout:$accompanist_version"
    /**
     * @name Drawable Painter
     * @url https://google.github.io/accompanist/drawablepainter/
     * */
    implementation "com.google.accompanist:accompanist-drawablepainter:$accompanist_version"
    /**
     * @name System UI Controller for Jetpack Compose
     * @url https://google.github.io/accompanist/systemuicontroller/
     * */
    implementation "com.google.accompanist:accompanist-systemuicontroller:$accompanist_version"

    /**
     * @name Google Jetpack Room
     * @url https://developer.android.google.cn/jetpack/androidx/releases/room?hl=zh-cn
     * */
    def room_version = '2.5.0'
    implementation "androidx.room:room-runtime:$room_version"
    kapt "androidx.room:room-compiler:$room_version"
    implementation "androidx.room:room-ktx:$room_version"

    /**
     * @name kotlinx.serialization
     * @url https://github.com/Kotlin/kotlinx.serialization/blob/master/README.md#setup
     * @url https://github.com/Kotlin/kotlinx.serialization/blob/master/formats/README.md#ProtoBuf
     * */
    def serialization_version = '1.4.1'
    implementation "org.jetbrains.kotlinx:kotlinx-serialization-protobuf:$serialization_version"
    implementation "org.jetbrains.kotlinx:kotlinx-serialization-json:$serialization_version"

    /**
     * @name Shizuku API
     * @url https://github.com/RikkaApps/Shizuku-API
     * */
    def shizuku_version = '12.2.0'
    implementation "dev.rikka.shizuku:api:$shizuku_version"
    implementation "dev.rikka.shizuku:provider:$shizuku_version"

    /**
     * @name WorkManager
     * @url https://developer.android.google.cn/topic/libraries/architecture/workmanager/basics
     * */
    def work_version = '2.7.1'
    implementation "androidx.work:work-runtime-ktx:$work_version"

    /**
     * @name Coil
     * @url https://coil-kt.github.io/coil/compose/
     * @description An image loading library for Android backed by Kotlin Coroutines.
     * */
    def coil_version = '2.2.2'
    implementation "io.coil-kt:coil-compose:$coil_version"

    /**
     * @name XXPermissions
     * @url https://github.com/getActivity/XXPermissions
     * @description 权限请求框架
     * */
    def xx_permissions_version = '16.5'
    implementation "com.github.getActivity:XXPermissions:$xx_permissions_version"
}